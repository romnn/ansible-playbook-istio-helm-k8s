---
- name: Check for existing installation of cmctl
  stat:
    path: '{{ cmctl_install_dir }}'
  changed_when: false
  register: cmctl_binary_exists

- when: not cmctl_binary_exists.stat.exists
  block:
    - name: Download the cmctl archive
      get_url:
        url: '{{ cmctl_download_url }}'
        dest: '/tmp/{{ cmctl_archive }}'
        mode: 0644

    - name: Create an installation directory for cmctl
      file:
        path: '{{ cmctl_install_dir }}'
        state: directory
        mode: 0755

    - name: Unarchiving cmctl
      unarchive:
        copy: no
        src: '/tmp/{{ cmctl_archive }}'
        dest: '{{ cmctl_install_dir }}'
        creates: '{{ cmctl_install_dir }}/cmctl'
  always:
    - name: Remove cmctl archive
      file:
        path: '/tmp/{{ cmctl_archive }}'
        state: absent

- name: Linking the cmctl binary
  file:
    src: '{{ cmctl_install_dir }}/cmctl'
    dest: '{{ cmctl_bin_dir }}/cmctl'
    owner: "{{service_user}}"
    group: "{{service_group}}"
    state: link

- name: Add jetstack cmctl repo
  become_user: "{{service_user}}"
  kubernetes.core.helm_repository:
    name: jetstack
    repo_url: "https://charts.jetstack.io"

- name: Create cert-manager namespace
  become_user: "{{service_user}}"
  kubernetes.core.k8s:
    name: cert-manager
    api_version: v1
    kind: Namespace
    state: present

- name: Deploy cert-manager
  become_user: "{{service_user}}"
  kubernetes.core.helm:
    name: cert-manager
    chart_ref: jetstack/cert-manager
    wait: true
    release_namespace: cert-manager
    chart_version: "v{{certman_version}}"
    values:
      installCRDs: true

- name: Create cert-manager staging cluster issuer
  become_user: "{{service_user}}"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: letsencrypt-staging
        namespace: cert-manager
      spec:
        acme:
          server: https://acme-staging-v02.api.letsencrypt.org/directory
          email: "{{acmeIssuerEmail}}"
          privateKeySecretRef:
            name: letsencrypt-staging
          solvers:
            - http01:
                ingress:
                  class: nginx

- name: Create cert-manager production cluster issuer
  become_user: "{{service_user}}"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: letsencrypt-prod
        namespace: cert-manager
      spec:
        acme:
          server: https://acme-v02.api.letsencrypt.org/directory
          email: "{{acmeIssuerEmail}}"
          privateKeySecretRef:
            name: letsencrypt-prod
          solvers:
            - http01:
                ingress:
                  class: nginx
